{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/layouts/Gaveta/index.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport routes from \"../../routes\"; //navBar\n\nimport NavbarLinks from \"../../components/Navbars/AdminNavbarLinks\";\nimport classNames from \"classnames\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction activeRoute(routeName) {\n  return window.location.href.indexOf(routeName) > -1 ? true : false;\n}\n\nconst {\n  logo,\n  logoText,\n  image,\n  handleDrawerToggle,\n  open,\n  color\n} = props;\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'inline'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    flexFlow: 'row nowrap',\n    justifyContent: 'space-between'\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap'\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar\n  },\n  content: {\n    flexGrow: 1,\n    paddingLeft: 100,\n    paddingRight: 50\n  }\n}));\n\nconst getRoute = () => {\n  return window.location.pathname !== \"/admin/maps\";\n};\n\nconst switchRoutes = /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }\n}, routes.map((prop, key) => {\n  if (prop.layout === \"/admin2\") {\n    return /*#__PURE__*/React.createElement(Route, {\n      path: prop.layout + prop.path,\n      component: prop.component,\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    });\n  }\n\n  return null;\n}), /*#__PURE__*/React.createElement(Redirect, {\n  from: \"/admin2\",\n  to: \"/admin2/dash\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }\n}));\nexport default function MiniDrawer(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AppBar, {\n    position: \"fixed\",\n    color: \"colorPrimary\",\n    className: clsx(classes.appBar, {\n      [classes.appBarShift]: open\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerOpen,\n    edge: \"start\",\n    className: clsx(classes.menuButton, {\n      [classes.hide]: open\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MenuIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    noWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Dash Board\")), /*#__PURE__*/React.createElement(NavbarLinks, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Drawer, {\n    variant: \"permanent\",\n    className: clsx(classes.drawer, {\n      [classes.drawerOpen]: open,\n      [classes.drawerClose]: !open\n    }),\n    classes: {\n      paper: clsx({\n        [classes.drawerOpen]: open,\n        [classes.drawerClose]: !open\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleDrawerClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }, theme.direction === 'rtl' ? /*#__PURE__*/React.createElement(ChevronRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 54\n    }\n  }) : /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 77\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, routes.map((prop, key) => {\n    var listItemClasses;\n    listItemClasses = classNames({\n      [\" \" + classes[color]]: activeRoute(prop.layout + prop.path)\n    });\n    const whiteFontClasses = classNames({\n      [\" \" + classes.whiteFont]: activeRoute(prop.layout + prop.path)\n    });\n    return /*#__PURE__*/React.createElement(NavLink, {\n      to: prop.layout + prop.path,\n      className: activePro + classes.item,\n      activeClassName: \"active\",\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      className: classes.itemLink + listItemClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 37\n      }\n    }, typeof prop.icon === \"string\" ? /*#__PURE__*/React.createElement(Icon, {\n      className: classNames(classes.itemIcon, whiteFontClasses, {\n        [classes.itemIconRTL]: props.rtlActive\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 45\n      }\n    }, prop.icon) : /*#__PURE__*/React.createElement(prop.icon, {\n      className: classNames(classes.itemIcon, whiteFontClasses, {\n        [classes.itemIconRTL]: props.rtlActive\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: props.rtlActive ? prop.rtlName : prop.name,\n      className: classNames(classes.itemText, whiteFontClasses, {\n        [classes.itemTextRTL]: props.rtlActive\n      }),\n      disableTypography: false //era true\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 41\n      }\n    })));\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }, ['All mail', 'Trash', 'Spam'].map((text, index) => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    key: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 29\n    }\n  }, index % 2 === 0 ? /*#__PURE__*/React.createElement(InboxIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 62\n    }\n  }) : /*#__PURE__*/React.createElement(MailIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 78\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 29\n    }\n  }))))), getRoute() ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }, switchRoutes)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.map,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 21\n    }\n  }, switchRoutes));\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/layouts/Gaveta/index.js"],"names":["React","clsx","makeStyles","useTheme","Drawer","AppBar","Toolbar","List","CssBaseline","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","ChevronRightIcon","ListItem","ListItemIcon","ListItemText","InboxIcon","MailIcon","Switch","Route","Redirect","routes","NavbarLinks","classNames","Icon","NavLink","activeRoute","routeName","window","location","href","indexOf","logo","logoText","image","handleDrawerToggle","open","color","props","drawerWidth","useStyles","theme","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","flexFlow","justifyContent","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","padding","mixins","content","flexGrow","paddingLeft","paddingRight","getRoute","pathname","switchRoutes","map","prop","key","layout","path","component","MiniDrawer","classes","setOpen","useState","handleDrawerOpen","handleDrawerClose","paper","direction","list","listItemClasses","whiteFontClasses","whiteFont","activePro","item","itemLink","icon","itemIcon","itemIconRTL","rtlActive","rtlName","name","itemText","itemTextRTL","text","index","container"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport routes from \"../../routes\";\n\n//navBar\nimport NavbarLinks from \"../../components/Navbars/AdminNavbarLinks\";\nimport classNames from \"classnames\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction activeRoute(routeName) {\n    return window.location.href.indexOf(routeName) > -1 ? true : false;\n}\n\nconst { logo, logoText, image, handleDrawerToggle, open, color } = props;\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'inline',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        flexFlow: 'row nowrap',\n        justifyContent: 'space-between',\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1,\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: 100,\n        paddingRight: 50,\n    },\n}));\n\nconst getRoute = () => {\n    return window.location.pathname !== \"/admin/maps\";\n};\n\nconst switchRoutes = (\n    <Switch>\n        {routes.map((prop, key) => {\n            if (prop.layout === \"/admin2\") {\n                return (\n                    <Route\n                        path={prop.layout + prop.path}\n                        component={prop.component}\n                        key={key}\n                    />\n                );\n            }\n            return null;\n        })}\n        <Redirect from=\"/admin2\" to=\"/admin2/dash\" />\n    </Switch>\n);\n\nexport default function MiniDrawer(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                color='colorPrimary'\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Dash Board\n                     </Typography>\n                </Toolbar>\n                <NavbarLinks />\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <List className={classes.list}>\n                        {routes.map((prop, key) => {\n\n                            var listItemClasses;\n\n\n                            listItemClasses = classNames({\n                                [\" \" + classes[color]]: activeRoute(prop.layout + prop.path)\n                            });\n\n                            const whiteFontClasses = classNames({\n                                [\" \" + classes.whiteFont]: activeRoute(prop.layout + prop.path)\n                            });\n                            return (\n                                <NavLink\n                                    to={prop.layout + prop.path}\n                                    className={activePro + classes.item}\n                                    activeClassName=\"active\"\n                                    key={key}\n                                >\n                                    <ListItem button className={classes.itemLink + listItemClasses}>\n                                        {typeof prop.icon === \"string\" ? (\n                                            <Icon\n                                                className={classNames(classes.itemIcon, whiteFontClasses, {\n                                                    [classes.itemIconRTL]: props.rtlActive\n                                                })}\n                                            >\n                                                {prop.icon}\n                                            </Icon>\n                                        ) : (\n                                                <prop.icon\n                                                    className={classNames(classes.itemIcon, whiteFontClasses, {\n                                                        [classes.itemIconRTL]: props.rtlActive\n                                                    })}\n                                                />\n                                            )}\n                                        <ListItemText\n                                            primary={props.rtlActive ? prop.rtlName : prop.name}\n                                            className={classNames(classes.itemText, whiteFontClasses, {\n                                                [classes.itemTextRTL]: props.rtlActive\n                                            })}\n                                            disableTypography={false}//era true\n                                        />\n                                    </ListItem>\n                                </NavLink>\n                            );\n                        })}\n                    </List>\n\n                </List>\n                <Divider />\n                <List>\n                    {['All mail', 'Trash', 'Spam'].map((text, index) => (\n                        <ListItem button key={text}>\n                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Drawer>\n            {getRoute() ? (\n                <div className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <div className={classes.container}>{switchRoutes}</div>\n                </div>\n            ) : (\n                    <div className={classes.map}>{switchRoutes}</div>\n                )}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}