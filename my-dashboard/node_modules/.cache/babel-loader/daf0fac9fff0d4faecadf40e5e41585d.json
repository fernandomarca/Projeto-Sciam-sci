{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js\";\nimport React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Nome',\n      field: 'nome'\n    }, {\n      title: 'Preço',\n      field: 'preco',\n      type: 'numeric'\n    }, {\n      title: 'Area Útil',\n      field: 'areaUtil',\n      type: 'numeric'\n    }, {\n      title: 'Valor/m2',\n      field: 'valorm2',\n      type: 'numeric'\n    }, {\n      title: 'Bairro',\n      field: 'bairro'\n    }, {\n      title: 'Cidade',\n      field: 'cidade',\n      lookup: {\n        34: 'Cascavel'\n      }\n    }, {\n      title: 'Link',\n      field: 'link'\n    }],\n    data: [{\n      nome: 'Ap Modelo',\n      preco: 200000,\n      areaUtil: 60,\n      valorm2: 0,\n      bairro: 'Cancelli',\n      cidade: 34,\n      link: 'Link'\n    }]\n  });\n  useEffect(() => {\n    (async function loadImoveis() {\n      const response = await api.get('/imovel');\n      setDataApi(response.data);\n    })();\n  }, []);\n  var imoveis = dataApi.map((ap, index) => {\n    let valorm2 = ap.preco / ap.areaUtil;\n    let linkHref = ap.link;\n    console.log(imoveis);\n    return [`${index + 1}`, `${ap.nome}`, `${ap.preco.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`, `${ap.areaUtil} m2`, `${valorm2.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`, `${ap.bairro}`, /*#__PURE__*/React.createElement(Link, {\n      target: \"_blank\",\n      rel: \"noopener\",\n      href: linkHref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, \"Link do An\\xFAncio\")];\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Editable Example\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js"],"names":["React","useEffect","useState","MaterialTable","MaterialTableDemo","state","setState","columns","title","field","type","lookup","data","nome","preco","areaUtil","valorm2","bairro","cidade","link","loadImoveis","response","api","get","setDataApi","imoveis","dataApi","map","ap","index","linkHref","console","log","toLocaleString","style","currency","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\n\nexport default function MaterialTableDemo() {\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Nome', field: 'nome' },\n            { title: 'Preço', field: 'preco', type: 'numeric' },\n            { title: 'Area Útil', field: 'areaUtil', type: 'numeric' },\n            { title: 'Valor/m2', field: 'valorm2', type: 'numeric' },\n            { title: 'Bairro', field: 'bairro' },\n            {\n                title: 'Cidade',\n                field: 'cidade',\n                lookup: { 34: 'Cascavel' },\n            },\n            { title: 'Link', field: 'link' },\n        ],\n        data: [\n            { nome: 'Ap Modelo', preco: 200000, areaUtil: 60, valorm2: 0, bairro: 'Cancelli', cidade: 34, link: 'Link' },\n        ],\n    });\n\n    useEffect(() => {\n        (async function loadImoveis() {\n            const response = await api.get('/imovel');\n            setDataApi(response.data)\n        }());\n\n    }, [])\n\n    var imoveis = dataApi.map((ap, index) => {\n        let valorm2 = ap.preco / ap.areaUtil\n        let linkHref = ap.link;\n        console.log(imoveis)\n        return [\n            `${index + 1}`,\n            `${ap.nome}`,\n            `${ap.preco.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`,\n            `${ap.areaUtil} m2`,\n            `${valorm2.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`,\n            `${ap.bairro}`,\n            <Link target='_blank' rel='noopener' href={linkHref} >Link do Anúncio</Link>\n        ]\n    })\n\n    return (\n        <MaterialTable\n            title=\"Editable Example\"\n            columns={state.columns}\n            data={state.data}\n            editable={{\n                onRowAdd: (newData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            setState((prevState) => {\n                                const data = [...prevState.data];\n                                data.push(newData);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            if (oldData) {\n                                setState((prevState) => {\n                                    const data = [...prevState.data];\n                                    data[data.indexOf(oldData)] = newData;\n                                    return { ...prevState, data };\n                                });\n                            }\n                        }, 600);\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            setState((prevState) => {\n                                const data = [...prevState.data];\n                                data.splice(data.indexOf(oldData), 1);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n            }}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}