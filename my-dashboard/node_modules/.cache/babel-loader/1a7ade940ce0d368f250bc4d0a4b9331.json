{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Charts/Bar/ChartBar1.js\";\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport api from '../../../services/api'; //reduce para extrair somente os bairros não repetidos\n\nconst bairrosReduce = dataApi.reduce((acc, ap) => {\n  if (!acc.includes(ap.bairro)) {\n    acc.push(ap.bairro);\n  }\n\n  return acc;\n}, []).sort(); //Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\n\nconst quantAptosBairro = [];\n\nfor (const key in bairrosReduce) {\n  const filterBairro = dataApi.filter(ap => ap.bairro.includes(bairrosReduce[key])); //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n\n  quantAptosBairro.push(filterBairro.length);\n}\n\nconst barData = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Unidades por Bairro',\n    backgroundColor: 'rgb(34, 0, 255,0.2)',\n    borderColor: 'rgb(34, 0, 255)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n    hoverBorderColor: 'rgb(34, 0, 255)',\n    data: [...quantAptosBairro]\n  }]\n};\n\nconst ChartBar1 = () => {\n  const [dataApi, setDataApi] = useState([]);\n\n  (async function () {\n    const response = await api.get('/imovel');\n    setDataApi.push(response.data);\n    console.log(dataApi);\n  })();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: barData,\n    width: 100,\n    height: 50,\n    options: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ChartBar1;","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Charts/Bar/ChartBar1.js"],"names":["React","useState","Bar","api","bairrosReduce","dataApi","reduce","acc","ap","includes","bairro","push","sort","quantAptosBairro","key","filterBairro","filter","length","barData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","ChartBar1","setDataApi","response","get","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB,C,CAGA;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC9C,MAAI,CAACD,GAAG,CAACE,QAAJ,CAAaD,EAAE,CAACE,MAAhB,CAAL,EAA8B;AAC1BH,IAAAA,GAAG,CAACI,IAAJ,CAASH,EAAE,CAACE,MAAZ;AACH;;AACD,SAAOH,GAAP;AACH,CALqB,EAKnB,EALmB,EAKfK,IALe,EAAtB,C,CAOA;;AACA,MAAMC,gBAAgB,GAAG,EAAzB;;AACA,KAAK,MAAMC,GAAX,IAAkBV,aAAlB,EAAiC;AAC7B,QAAMW,YAAY,GAAGV,OAAO,CAACW,MAAR,CAAgBR,EAAD,IAAQA,EAAE,CAACE,MAAH,CAAUD,QAAV,CAAmBL,aAAa,CAACU,GAAD,CAAhC,CAAvB,CAArB,CAD6B,CAE7B;;AACAD,EAAAA,gBAAgB,CAACF,IAAjB,CAAsBI,YAAY,CAACE,MAAnC;AACH;;AAED,MAAMC,OAAO,GAAG;AACZC,EAAAA,MAAM,EAAE,CAAC,GAAGf,aAAJ,CADI;AAEZgB,EAAAA,QAAQ,EAAE,CACN;AACIC,IAAAA,KAAK,EAAE,qBADX;AAEIC,IAAAA,eAAe,EAAE,qBAFrB;AAGIC,IAAAA,WAAW,EAAE,iBAHjB;AAIIC,IAAAA,WAAW,EAAE,CAJjB;AAKIC,IAAAA,oBAAoB,EAAE,qBAL1B;AAMIC,IAAAA,gBAAgB,EAAE,iBANtB;AAOIC,IAAAA,IAAI,EAAE,CAAC,GAAGd,gBAAJ;AAPV,GADM;AAFE,CAAhB;;AAeA,MAAMe,SAAS,GAAG,MAAM;AACpB,QAAM,CAACvB,OAAD,EAAUwB,UAAV,IAAwB5B,QAAQ,CAAC,EAAD,CAAtC;;AAEC,qBAAkB;AACf,UAAM6B,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,GAAJ,CAAQ,SAAR,CAAvB;AACAF,IAAAA,UAAU,CAAClB,IAAX,CAAgBmB,QAAQ,CAACH,IAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY5B,OAAZ;AACH,GAJA,GAAD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,GAAD;AACI,IAAA,IAAI,EAAEa,OADV;AAEI,IAAA,KAAK,EAAE,GAFX;AAGI,IAAA,MAAM,EAAE,EAHZ;AAII,IAAA,OAAO,EAAE,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAaH,CAtBD;;AAwBA,eAAeU,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport api from '../../../services/api'\n\n\n//reduce para extrair somente os bairros não repetidos\nconst bairrosReduce = dataApi.reduce((acc, ap) => {\n    if (!acc.includes(ap.bairro)) {\n        acc.push(ap.bairro);\n    }\n    return acc;\n}, []).sort()\n\n//Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\nconst quantAptosBairro = []\nfor (const key in bairrosReduce) {\n    const filterBairro = dataApi.filter((ap) => ap.bairro.includes(bairrosReduce[key]))\n    //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n    quantAptosBairro.push(filterBairro.length)\n}\n\nconst barData = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Unidades por Bairro',\n            backgroundColor: 'rgb(34, 0, 255,0.2)',\n            borderColor: 'rgb(34, 0, 255)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n            hoverBorderColor: 'rgb(34, 0, 255)',\n            data: [...quantAptosBairro]\n        }\n    ]\n};\n\nconst ChartBar1 = () => {\n    const [dataApi, setDataApi] = useState([]);\n\n    (async function () {\n        const response = await api.get('/imovel');\n        setDataApi.push(response.data)\n        console.log(dataApi)\n    }());\n\n    return (\n        <div>\n\n            <Bar\n                data={barData}\n                width={100}\n                height={50}\n                options={{\n\n                }}\n            />\n        </div>\n    );\n}\n\nexport default ChartBar1"]},"metadata":{},"sourceType":"module"}