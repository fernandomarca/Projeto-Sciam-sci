{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Nome',\n      field: 'nome'\n    }, {\n      title: 'Preço',\n      field: 'preco',\n      type: 'numeric'\n    }, {\n      title: 'Area Útil',\n      field: 'areaUtil',\n      type: 'numeric'\n    }, {\n      title: 'Valor/m2',\n      field: 'valorm2',\n      type: 'numeric'\n    }, {\n      title: 'Bairro',\n      field: 'bairro'\n    }, {\n      title: 'Cidade',\n      field: 'cidade',\n      lookup: {\n        34: 'Cascavel'\n      }\n    }, {\n      title: 'Link',\n      field: 'link'\n    }],\n    data: [{\n      nome: 'Ap Modelo',\n      preco: 200000,\n      areaUtil: 60,\n      valorm2: 0,\n      bairro: 'Cancelli',\n      cidade: 34,\n      link: 'Link'\n    }]\n  });\n  let calcValorM2 = state.data.preco / state.data.areaUtil;\n  setState(prevState => {\n    const data = [...prevState.data];\n    data.valorm2 = calcValorM2;\n    ;\n    data.push(newData);\n    return { ...prevState,\n      data\n    };\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Editable Example\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js"],"names":["React","MaterialTable","MaterialTableDemo","state","setState","useState","columns","title","field","type","lookup","data","nome","preco","areaUtil","valorm2","bairro","cidade","link","calcValorM2","prevState","push","newData","onRowAdd","Promise","resolve","setTimeout","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MaterialTable from 'material-table';\n\nexport default function MaterialTableDemo() {\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Nome', field: 'nome' },\n            { title: 'Preço', field: 'preco', type: 'numeric' },\n            { title: 'Area Útil', field: 'areaUtil', type: 'numeric' },\n            { title: 'Valor/m2', field: 'valorm2', type: 'numeric' },\n            { title: 'Bairro', field: 'bairro' },\n            {\n                title: 'Cidade',\n                field: 'cidade',\n                lookup: { 34: 'Cascavel' },\n            },\n            { title: 'Link', field: 'link' },\n        ],\n        data: [\n            { nome: 'Ap Modelo', preco: 200000, areaUtil: 60, valorm2: 0, bairro: 'Cancelli', cidade: 34, link: 'Link' },\n        ],\n    });\n\n    let calcValorM2 = state.data.preco / state.data.areaUtil;\n\n    setState((prevState) => {\n        const data = [...prevState.data];\n        data.valorm2 = calcValorM2;;\n        data.push(newData);\n        return { ...prevState, data };\n    });\n\n\n\n    return (\n        <MaterialTable\n            title=\"Editable Example\"\n            columns={state.columns}\n            data={state.data}\n            editable={{\n                onRowAdd: (newData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            setState((prevState) => {\n                                const data = [...prevState.data];\n                                data.push(newData);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            if (oldData) {\n                                setState((prevState) => {\n                                    const data = [...prevState.data];\n                                    data[data.indexOf(oldData)] = newData;\n                                    return { ...prevState, data };\n                                });\n                            }\n                        }, 600);\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve();\n                            setState((prevState) => {\n                                const data = [...prevState.data];\n                                data.splice(data.indexOf(oldData), 1);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n            }}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}