{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/DashBoardBootstrap/react/git/material-dashboard-react/my-dashboard/src/components/Charts/Legend-handlers/index.js\";\nimport React, { useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nconst data = {\n  labels: ['Red', 'Green', 'Yellow'],\n  datasets: [{\n    data: [300, 50, 100],\n    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']\n  }]\n};\nconst legendOpts = {\n  onClick: (e, item) => alert(`Item with text ${item.text} and index ${item.index} clicked`),\n  onHover: (e, item) => alert(`Item with text ${item.text} and index ${item.index} hovered`)\n};\n\nconst ChartLegendHandlers = () => {\n  function getInitialState() {\n    return {\n      legend: legendOpts\n    };\n  }\n\n  getInitialState();\n\n  function applyLegendSettings() {\n    const {\n      value\n    } = legendOptsInput;\n\n    try {\n      const opts = JSON.parse(value);\n      const [state, setState] = useState();\n      setState({\n        legend: opts\n      });\n    } catch (e) {\n      alert(e.message);\n      throw Error(e);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Hover over label and click\"), /*#__PURE__*/React.createElement(Pie, {\n    data: data,\n    legend: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChartLegendHandlers;","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/DashBoardBootstrap/react/git/material-dashboard-react/my-dashboard/src/components/Charts/Legend-handlers/index.js"],"names":["React","useState","Pie","data","labels","datasets","backgroundColor","hoverBackgroundColor","legendOpts","onClick","e","item","alert","text","index","onHover","ChartLegendHandlers","getInitialState","legend","applyLegendSettings","value","legendOptsInput","opts","JSON","parse","state","setState","message","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,MAAM,EAAE,CACN,KADM,EAEN,OAFM,EAGN,QAHM,CADG;AAMXC,EAAAA,QAAQ,EAAE,CAAC;AACTF,IAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,CADG;AAETG,IAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,CAFR;AAOTC,IAAAA,oBAAoB,EAAE,CACpB,SADoB,EAEpB,SAFoB,EAGpB,SAHoB;AAPb,GAAD;AANC,CAAb;AAqBA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,OAAO,EAAE,CAACC,CAAD,EAAIC,IAAJ,KAAaC,KAAK,CAAE,kBAAiBD,IAAI,CAACE,IAAK,cAAaF,IAAI,CAACG,KAAM,UAArD,CADV;AAEjBC,EAAAA,OAAO,EAAE,CAACL,CAAD,EAAIC,IAAJ,KAAaC,KAAK,CAAE,kBAAiBD,IAAI,CAACE,IAAK,cAAaF,IAAI,CAACG,KAAM,UAArD;AAFV,CAAnB;;AAKA,MAAME,mBAAmB,GAAG,MAAM;AAEhC,WAASC,eAAT,GAA2B;AACzB,WAAO;AACLC,MAAAA,MAAM,EAAEV;AADH,KAAP;AAGD;;AAEDS,EAAAA,eAAe;;AAEf,WAASE,mBAAT,GAA+B;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAYC,eAAlB;;AAEA,QAAI;AACF,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAb;AACA,YAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,EAAlC;AACAyB,MAAAA,QAAQ,CAAC;AACPR,QAAAA,MAAM,EAAEI;AADD,OAAD,CAAR;AAGD,KAND,CAME,OAAOZ,CAAP,EAAU;AACVE,MAAAA,KAAK,CAACF,CAAC,CAACiB,OAAH,CAAL;AACA,YAAMC,KAAK,CAAClB,CAAD,CAAX;AACD;AACF;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,eAGE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEP,IAAX;AAAiB,IAAA,MAAM,EAAEsB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAQD,CAjCD;;AAkCA,eAAeT,mBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\n\nconst data = {\n  labels: [\n    'Red',\n    'Green',\n    'Yellow'\n  ],\n  datasets: [{\n    data: [300, 50, 100],\n    backgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56'\n    ],\n    hoverBackgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56'\n    ]\n  }]\n};\n\nconst legendOpts = {\n  onClick: (e, item) => alert(`Item with text ${item.text} and index ${item.index} clicked`),\n  onHover: (e, item) => alert(`Item with text ${item.text} and index ${item.index} hovered`),\n};\n\nconst ChartLegendHandlers = () => {\n\n  function getInitialState() {\n    return {\n      legend: legendOpts\n    }\n  }\n\n  getInitialState();\n\n  function applyLegendSettings() {\n    const { value } = legendOptsInput;\n\n    try {\n      const opts = JSON.parse(value);\n      const [state, setState] = useState()\n      setState({\n        legend: opts\n      });\n    } catch (e) {\n      alert(e.message);\n      throw Error(e);\n    }\n  }\n\n  return (\n    <div>\n      <h2></h2>\n      <p>Hover over label and click</p>\n      <Pie data={data} legend={state} />\n    </div>\n  );\n\n}\nexport default ChartLegendHandlers"]},"metadata":{},"sourceType":"module"}