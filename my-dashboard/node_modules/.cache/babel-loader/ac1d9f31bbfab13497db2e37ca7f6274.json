{"ast":null,"code":"const resultSanitized = require('../resultSanitized/resultSanitized'); //reduce para extrair somente os bairros não repetidos\n\n\nconst bairrosReduce = resultSanitized.reduce((acc, ap) => {\n  if (!acc.includes(ap.bairro)) {\n    acc.push(ap.bairro);\n  }\n\n  return acc;\n}, []).sort(); //console.log(bairrosReduce)\n//Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\n\nconst quantAptosBairro = [];\n\nfor (const key in bairrosReduce) {\n  const filterBairro = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[key])); //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n\n  quantAptosBairro.push(filterBairro.length);\n} //gráfico distribuição de apartamentos por bairro\n\n\nconst barData = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Imóveis por Bairro',\n    backgroundColor: 'rgb(34, 0, 255,0.2)',\n    borderColor: 'rgb(34, 0, 255)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n    hoverBorderColor: 'rgb(34, 0, 255)',\n    data: [...quantAptosBairro]\n  }]\n}; //gráfico tamanho médio de área por bairro\n//somar as áreas por bairro e dividi pela quantidade de apartamentos\n//Soma das áreas por bairro\n\nconst mediaAreaBairro = [];\nbairrosReduce.map((bairro, index) => {\n  const apto = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[index]));\n  let somaArea = apto.reduce((acc, apto, index) => {\n    acc = acc + apto.areaUtil; //console.log(index)\n\n    return acc;\n  }, 0);\n  mediaAreaBairro.push((somaArea / apto.length).toFixed(2));\n}); //console.log(mediaAreaBairro)\n\nconst barData2 = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Tamanho médio por Bairro',\n    backgroundColor: 'rgb(7, 155, 15,0.2)',\n    borderColor: 'rgb(7, 155, 15)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(7, 155, 15,0.4)',\n    hoverBorderColor: 'rgb(7, 155, 15)',\n    data: [...mediaAreaBairro]\n  }]\n}; //gráfico valor médio do m2 por bairro\n//valor médio do m2 por bairro: soma(preco/area)/qtdaAptos\n\nconst valorM2Bairro = [];\nbairrosReduce.map((bairro, index) => {\n  const apto = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[index]));\n  let custoM2 = apto.reduce((acc, apto, index) => {\n    acc = acc + apto.preco / apto.areaUtil; //console.log(index)\n\n    return acc;\n  }, 0);\n  valorM2Bairro.push((custoM2 / apto.length).toFixed(2));\n}); //console.log(valorM2Bairro)\n\nconst barData3 = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Valor m² por Bairro',\n    backgroundColor: 'rgb(196, 3, 3,0.2)',\n    borderColor: 'rgb(196, 3, 3)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(196, 3, 3,0.4)',\n    hoverBorderColor: 'rgb(196, 3, 3)',\n    data: [...valorM2Bairro]\n  }]\n};\nmodule.exports = {\n  barData,\n  barData2,\n  barData3\n};","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/variables/charts/data.js"],"names":["resultSanitized","require","bairrosReduce","reduce","acc","ap","includes","bairro","push","sort","quantAptosBairro","key","filterBairro","filter","length","barData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","mediaAreaBairro","map","index","apto","somaArea","areaUtil","toFixed","barData2","valorM2Bairro","custoM2","preco","barData3","module","exports"],"mappings":"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","sourcesContent":["const resultSanitized = require('../resultSanitized/resultSanitized')\n\n//reduce para extrair somente os bairros não repetidos\nconst bairrosReduce = resultSanitized.reduce((acc, ap) => {\n    if (!acc.includes(ap.bairro)) {\n        acc.push(ap.bairro);\n    }\n    return acc;\n}, []).sort()\n//console.log(bairrosReduce)\n\n//Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\nconst quantAptosBairro = []\nfor (const key in bairrosReduce) {\n    const filterBairro = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[key]))\n    //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n    quantAptosBairro.push(filterBairro.length)\n}\n\n//gráfico distribuição de apartamentos por bairro\nconst barData = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Imóveis por Bairro',\n            backgroundColor: 'rgb(34, 0, 255,0.2)',\n            borderColor: 'rgb(34, 0, 255)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n            hoverBorderColor: 'rgb(34, 0, 255)',\n            data: [...quantAptosBairro]\n        }\n    ]\n};\n\n\n//gráfico tamanho médio de área por bairro\n//somar as áreas por bairro e dividi pela quantidade de apartamentos\n//Soma das áreas por bairro\nconst mediaAreaBairro = []\n\nbairrosReduce.map((bairro, index) => {\n    const apto = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[index]))\n    let somaArea = apto.reduce((acc, apto, index) => {\n        acc = (acc + apto.areaUtil);\n        //console.log(index)\n        return acc\n    }, 0)\n    mediaAreaBairro.push((somaArea / apto.length).toFixed(2))\n})\n//console.log(mediaAreaBairro)\n\nconst barData2 = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Tamanho médio por Bairro',\n            backgroundColor: 'rgb(7, 155, 15,0.2)',\n            borderColor: 'rgb(7, 155, 15)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(7, 155, 15,0.4)',\n            hoverBorderColor: 'rgb(7, 155, 15)',\n            data: [...mediaAreaBairro]\n        }\n    ]\n};\n\n//gráfico valor médio do m2 por bairro\n//valor médio do m2 por bairro: soma(preco/area)/qtdaAptos\nconst valorM2Bairro = []\nbairrosReduce.map((bairro, index) => {\n    const apto = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[index]))\n    let custoM2 = apto.reduce((acc, apto, index) => {\n        acc = acc + (apto.preco / apto.areaUtil);\n        //console.log(index)\n        return acc\n    }, 0)\n    valorM2Bairro.push((custoM2 / apto.length).toFixed(2))\n})\n//console.log(valorM2Bairro)\n\nconst barData3 = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Valor m² por Bairro',\n            backgroundColor: 'rgb(196, 3, 3,0.2)',\n            borderColor: 'rgb(196, 3, 3)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(196, 3, 3,0.4)',\n            hoverBorderColor: 'rgb(196, 3, 3)',\n            data: [...valorM2Bairro]\n        }\n    ]\n};\n\nmodule.exports = { barData, barData2, barData3 };"]},"metadata":{},"sourceType":"module"}