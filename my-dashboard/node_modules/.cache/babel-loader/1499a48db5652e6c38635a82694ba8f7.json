{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js\";\nimport React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport api from '../../services/api';\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Nome',\n      field: 'nome'\n    }, {\n      title: 'Preço',\n      field: 'preco',\n      type: 'currency',\n      currencySetting: {\n        currencyCode: 'BRL',\n        locale: 'pt-BR'\n      }\n    }, {\n      title: 'Area Útil',\n      field: 'areaUtil',\n      type: 'numeric',\n      align: 'center'\n    }, {\n      field: 'unid',\n      editable: 'never',\n      sorting: false,\n      readonly: true,\n      align: 'left'\n    }, {\n      title: 'Valor/m2',\n      field: 'valorm2',\n      editable: 'never'\n    }, {\n      title: 'Bairro',\n      field: 'bairro'\n    }, {\n      title: 'Cidade',\n      field: 'municipio'\n    }, {\n      title: 'Categoria',\n      field: 'categoria'\n    }, {\n      title: 'Tipo',\n      field: 'tipo'\n    }],\n    data: []\n  });\n  const [dataApi, setDataApi] = useState([]);\n  useEffect(() => {\n    loadImoveis();\n  }, []);\n\n  async function loadImoveis() {\n    const response = await api.get('/imovel');\n    setState(prevState => {\n      const data = prevState.data;\n      data.push(response.data);\n      return { ...prevState\n      };\n    });\n    var imoveis = state.data[0].map(ap => {\n      let valorm2 = ap.preco / ap.areaUtil;\n      return {\n        id: `${ap._id}`,\n        nome: `${ap.nome}`,\n        preco: `${ap.preco}`,\n        areaUtil: `${ap.areaUtil}`,\n        unid: 'm2',\n        valorm2: `${valorm2.toLocaleString('pt-br', {\n          style: 'currency',\n          currency: 'BRL'\n        })}`,\n        bairro: `${ap.bairro}`,\n        municipio: `${ap.municipio}`,\n        categoria: `${ap.categoria}`,\n        tipo: `${ap.tipo}`\n      };\n    });\n    setDataApi(imoveis);\n  }\n\n  ;\n\n  async function handleDelete(oldData) {\n    try {\n      let id = oldData.id;\n      await api.delete(`/imovel/${id}`);\n      setDataApi(dataApi.filter(imovel => imovel.id !== id));\n    } catch (err) {\n      alert('erro ao deletar:' + err);\n    }\n  }\n\n  async function handleAdd(newData) {\n    try {\n      await api.post('/imovel', newData);\n    } catch (err) {\n      alert('erro ao Cadastrar:' + err);\n    }\n  }\n\n  async function handleUpdate(newData, oldData) {\n    try {\n      if (oldData) {\n        let id = oldData.id;\n        await api.put(`/imovel/${id}`, newData);\n      }\n    } catch (err) {\n      alert('erro ao Atualizar:' + err);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Rel\\xE1torio\",\n    columns: state.columns,\n    data: dataApi,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleAdd(newData));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleUpdate(newData, oldData));\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleDelete(oldData));\n        }, 600);\n      })\n    },\n    localization: {\n      body: {\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\n        addTooltip: 'adicionar',\n        deleteTooltip: 'excluir',\n        editTooltip: 'editar',\n        editcancelTooltip: 'cancelar',\n        editRow: {\n          saveTooltip: 'salvar',\n          cancelTooltip: 'cancelar',\n          deleteText: 'Tem certeza de que deseja excluir?'\n        }\n      },\n      toolbar: {\n        searchTooltip: 'Pesquisar',\n        searchPlaceholder: 'Pesquisar'\n      },\n      pagination: {\n        labelRowsSelect: 'linhas',\n        labelDisplayedRows: '{count} de {from}-{to}',\n        firstTooltip: 'Primeira página',\n        previousTooltip: 'Página anterior',\n        nextTooltip: 'Próxima página',\n        lastTooltip: 'Última página'\n      }\n    },\n    options: {\n      grouping: true,\n      exportButton: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js"],"names":["React","useEffect","useState","MaterialTable","api","MaterialTableDemo","state","setState","columns","title","field","type","currencySetting","currencyCode","locale","align","editable","sorting","readonly","data","dataApi","setDataApi","loadImoveis","response","get","prevState","push","imoveis","map","ap","valorm2","preco","areaUtil","id","_id","nome","unid","toLocaleString","style","currency","bairro","municipio","categoria","tipo","handleDelete","oldData","delete","filter","imovel","err","alert","handleAdd","newData","post","handleUpdate","put","onRowAdd","Promise","resolve","setTimeout","onRowUpdate","onRowDelete","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","editcancelTooltip","editRow","saveTooltip","cancelTooltip","deleteText","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","firstTooltip","previousTooltip","nextTooltip","lastTooltip","grouping","exportButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\n\nimport api from '../../services/api';\n\nexport default function MaterialTableDemo() {\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Nome', field: 'nome' },\n            { title: 'Preço', field: 'preco', type: 'currency', currencySetting: { currencyCode: 'BRL', locale: 'pt-BR' } },\n            {\n                title: 'Area Útil', field: 'areaUtil', type: 'numeric', align: 'center'\n            },\n            { field: 'unid', editable: 'never', sorting: false, readonly: true, align: 'left' },\n            { title: 'Valor/m2', field: 'valorm2', editable: 'never' },\n            { title: 'Bairro', field: 'bairro' },\n            { title: 'Cidade', field: 'municipio' },\n            { title: 'Categoria', field: 'categoria' },\n            { title: 'Tipo', field: 'tipo' },\n        ],\n        data: []\n    });\n\n    const [dataApi, setDataApi] = useState([]);\n\n    useEffect(() => {\n        loadImoveis();\n    }, [])\n\n    async function loadImoveis() {\n        const response = await api.get('/imovel');\n        setState((prevState) => {\n            const data = prevState.data;\n            data.push(response.data);\n            return { ...prevState };\n        });\n        var imoveis = state.data[0].map((ap) => {\n            let valorm2 = ap.preco / ap.areaUtil\n            return {\n                id: `${ap._id}`,\n                nome: `${ap.nome}`,\n                preco: `${ap.preco}`,\n                areaUtil: `${ap.areaUtil}`,\n                unid: 'm2',\n                valorm2: `${valorm2.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}`,\n                bairro: `${ap.bairro}`,\n                municipio: `${ap.municipio}`,\n                categoria: `${ap.categoria}`,\n                tipo: `${ap.tipo}`,\n            }\n        })\n        setDataApi(imoveis);\n    };\n\n    async function handleDelete(oldData) {\n\n        try {\n            let id = oldData.id;\n            await api.delete(`/imovel/${id}`)\n            setDataApi(dataApi.filter(imovel => imovel.id !== id));\n        } catch (err) {\n            alert('erro ao deletar:' + err)\n        }\n    }\n\n    async function handleAdd(newData) {\n        try {\n            await api.post('/imovel', newData)\n\n        } catch (err) {\n            alert('erro ao Cadastrar:' + err)\n        }\n    }\n    async function handleUpdate(newData, oldData) {\n        try {\n            if (oldData) {\n                let id = oldData.id\n                await api.put(`/imovel/${id}`, newData);\n            }\n\n        } catch (err) {\n            alert('erro ao Atualizar:' + err)\n        }\n    }\n    return (\n        <MaterialTable\n            title=\"Relátorio\"\n            columns={state.columns}\n            data={dataApi}\n            editable={{\n                onRowAdd: (newData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleAdd(newData));\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleUpdate(newData, oldData));\n                        }, 600);\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleDelete(oldData));\n                        }, 600);\n                    }),\n            }}\n            localization={{\n                body: {\n                    emptyDataSourceMessage: 'Nenhum registro para exibir',\n                    addTooltip: 'adicionar',\n                    deleteTooltip: 'excluir',\n                    editTooltip: 'editar',\n                    editcancelTooltip: 'cancelar',\n                    editRow: {\n                        saveTooltip: 'salvar',\n                        cancelTooltip: 'cancelar',\n                        deleteText: 'Tem certeza de que deseja excluir?'\n                    },\n                },\n                toolbar: {\n                    searchTooltip: 'Pesquisar',\n                    searchPlaceholder: 'Pesquisar',\n                },\n                pagination: {\n                    labelRowsSelect: 'linhas',\n                    labelDisplayedRows: '{count} de {from}-{to}',\n                    firstTooltip: 'Primeira página',\n                    previousTooltip: 'Página anterior',\n                    nextTooltip: 'Próxima página',\n                    lastTooltip: 'Última página'\n                }\n            }}\n            options={{\n                grouping: true,\n                exportButton: true\n            }}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}