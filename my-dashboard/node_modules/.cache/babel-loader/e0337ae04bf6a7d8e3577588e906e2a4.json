{"ast":null,"code":"//const resultSanitized = require('../resultSanitized/resultSanitized');\nimport api from '../../services/api';\nvar resultSanitized = [];\n\n(async function loadImoveis() {\n  const response = await api.get('/imovel');\n  resultSanitized.push(response.data);\n})(); //reduce para extrair somente os bairros não repetidos\n\n\nconst bairrosReduce = resultSanitized.reduce((acc, ap) => {\n  if (!acc.includes(ap.bairro)) {\n    acc.push(ap.bairro);\n  }\n\n  return acc;\n}, []).sort(); //console.log(bairrosReduce)\n//Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\n\nconst quantAptosBairro = [];\n\nfor (const key in bairrosReduce) {\n  const filterBairro = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[key])); //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n\n  quantAptosBairro.push(filterBairro.length);\n} //gráfico distribuição de apartamentos por bairro\n\n\nconst barData = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Unidades por Bairro',\n    backgroundColor: 'rgb(34, 0, 255,0.2)',\n    borderColor: 'rgb(34, 0, 255)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n    hoverBorderColor: 'rgb(34, 0, 255)',\n    data: [...quantAptosBairro]\n  }]\n}; //gráfico tamanho médio de área por bairro\n//somar as áreas por bairro e dividi pela quantidade de apartamentos\n//Soma das áreas por bairro\n\nconst mediaAreaBairro = [];\nbairrosReduce.map((bairro, index) => {\n  const apto = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[index]));\n  let somaArea = apto.reduce((acc, apto, index) => {\n    acc = acc + apto.areaUtil; //console.log(index)\n\n    return acc;\n  }, 0);\n  return mediaAreaBairro.push((somaArea / apto.length).toFixed(2));\n}); //console.log(mediaAreaBairro)\n\nconst barData2 = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Tamanho médio por Bairro',\n    backgroundColor: 'rgb(7, 155, 15,0.2)',\n    borderColor: 'rgb(7, 155, 15)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(7, 155, 15,0.4)',\n    hoverBorderColor: 'rgb(7, 155, 15)',\n    data: [...mediaAreaBairro]\n  }]\n}; //gráfico valor médio do m2 por bairro\n//valor médio do m2 por bairro: soma(preco/area)/qtdaAptos\n\nconst valorM2Bairro = [];\nbairrosReduce.map((bairro, index) => {\n  const apto = resultSanitized.filter(ap => ap.bairro.includes(bairrosReduce[index]));\n  let custoM2 = apto.reduce((acc, apto, index) => {\n    acc = acc + apto.preco / apto.areaUtil; //console.log(index)\n\n    return acc;\n  }, 0);\n  return valorM2Bairro.push((custoM2 / apto.length).toFixed(2));\n}); //console.log(valorM2Bairro)\n\nconst barData3 = {\n  labels: [...bairrosReduce],\n  datasets: [{\n    label: 'Valor do m² por Bairro',\n    backgroundColor: 'rgb(196, 3, 3,0.2)',\n    borderColor: 'rgb(196, 3, 3)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgb(196, 3, 3,0.4)',\n    hoverBorderColor: 'rgb(196, 3, 3)',\n    data: [...valorM2Bairro]\n  }]\n};\nexport { barData, barData2, barData3 };","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/variables/charts/data.js"],"names":["api","resultSanitized","loadImoveis","response","get","push","data","bairrosReduce","reduce","acc","ap","includes","bairro","sort","quantAptosBairro","key","filterBairro","filter","length","barData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","mediaAreaBairro","map","index","apto","somaArea","areaUtil","toFixed","barData2","valorM2Bairro","custoM2","preco","barData3"],"mappings":"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","sourcesContent":["//const resultSanitized = require('../resultSanitized/resultSanitized');\nimport api from '../../services/api';\n\nvar resultSanitized = [];\n\n(async function loadImoveis() {\n    const response = await api.get('/imovel');\n    resultSanitized.push(response.data)\n}());\n\n//reduce para extrair somente os bairros não repetidos\nconst bairrosReduce = resultSanitized.reduce((acc, ap) => {\n    if (!acc.includes(ap.bairro)) {\n        acc.push(ap.bairro);\n    }\n    return acc;\n}, []).sort()\n//console.log(bairrosReduce)\n\n//Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\nconst quantAptosBairro = []\nfor (const key in bairrosReduce) {\n    const filterBairro = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[key]))\n    //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n    quantAptosBairro.push(filterBairro.length)\n}\n\n//gráfico distribuição de apartamentos por bairro\nconst barData = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Unidades por Bairro',\n            backgroundColor: 'rgb(34, 0, 255,0.2)',\n            borderColor: 'rgb(34, 0, 255)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n            hoverBorderColor: 'rgb(34, 0, 255)',\n            data: [...quantAptosBairro]\n        }\n    ]\n};\n\n\n//gráfico tamanho médio de área por bairro\n//somar as áreas por bairro e dividi pela quantidade de apartamentos\n//Soma das áreas por bairro\nconst mediaAreaBairro = []\n\nbairrosReduce.map((bairro, index) => {\n    const apto = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[index]))\n    let somaArea = apto.reduce((acc, apto, index) => {\n        acc = (acc + apto.areaUtil);\n        //console.log(index)\n        return acc\n    }, 0)\n    return mediaAreaBairro.push((somaArea / apto.length).toFixed(2))\n})\n//console.log(mediaAreaBairro)\n\nconst barData2 = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Tamanho médio por Bairro',\n            backgroundColor: 'rgb(7, 155, 15,0.2)',\n            borderColor: 'rgb(7, 155, 15)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(7, 155, 15,0.4)',\n            hoverBorderColor: 'rgb(7, 155, 15)',\n            data: [...mediaAreaBairro]\n        }\n    ]\n};\n\n//gráfico valor médio do m2 por bairro\n//valor médio do m2 por bairro: soma(preco/area)/qtdaAptos\nconst valorM2Bairro = []\nbairrosReduce.map((bairro, index) => {\n    const apto = resultSanitized.filter((ap) => ap.bairro.includes(bairrosReduce[index]))\n    let custoM2 = apto.reduce((acc, apto, index) => {\n        acc = acc + (apto.preco / apto.areaUtil);\n        //console.log(index)\n        return acc\n    }, 0)\n    return valorM2Bairro.push((custoM2 / apto.length).toFixed(2))\n})\n//console.log(valorM2Bairro)\n\nconst barData3 = {\n    labels: [...bairrosReduce],\n    datasets: [\n        {\n            label: 'Valor do m² por Bairro',\n            backgroundColor: 'rgb(196, 3, 3,0.2)',\n            borderColor: 'rgb(196, 3, 3)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgb(196, 3, 3,0.4)',\n            hoverBorderColor: 'rgb(196, 3, 3)',\n            data: [...valorM2Bairro]\n        }\n    ]\n};\n\nexport { barData, barData2, barData3 }\n"]},"metadata":{},"sourceType":"module"}