{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Charts/Bar/ChartBar1.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport api from '../../../services/api';\n\nconst ChartBar1 = () => {\n  const [dataApi, setDataApi] = useState([]);\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function load() {\n    const response = await api.get('/imovel');\n    setDataApi(response.data);\n  }\n\n  ; //reduce para extrair somente os bairros não repetidos\n\n  const bairrosReduce = dataApi.reduce((acc, ap) => {\n    if (!acc.includes(ap.bairro)) {\n      acc.push(ap.bairro);\n    }\n\n    return acc;\n  }, []); //Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\n\n  const quantAptosBairro = [];\n\n  for (const key in bairrosReduce) {\n    const filterBairro = dataApi.filter(ap => ap.bairro.includes(bairrosReduce[key])); //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n\n    quantAptosBairro.push(filterBairro.length);\n  }\n\n  const barData = {\n    labels: [...bairrosReduce],\n    datasets: [{\n      label: 'Unidades por Bairro',\n      backgroundColor: 'rgb(34, 0, 255,0.2)',\n      borderColor: 'rgb(34, 0, 255)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n      hoverBorderColor: 'rgb(34, 0, 255)',\n      data: [...quantAptosBairro]\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: barData,\n    width: 100,\n    height: 50,\n    options: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ChartBar1;","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Charts/Bar/ChartBar1.js"],"names":["React","useState","useEffect","Bar","api","ChartBar1","dataApi","setDataApi","load","response","get","data","bairrosReduce","reduce","acc","ap","includes","bairro","push","quantAptosBairro","key","filterBairro","filter","length","barData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,IAAI;AACP,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,IAAf,GAAsB;AAClB,UAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAJ,CAAQ,SAAR,CAAvB;AACAH,IAAAA,UAAU,CAACE,QAAQ,CAACE,IAAV,CAAV;AACH;;AAAA,GAVmB,CAYpB;;AACA,QAAMC,aAAa,GAAGN,OAAO,CAACO,MAAR,CAAe,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC9C,QAAI,CAACD,GAAG,CAACE,QAAJ,CAAaD,EAAE,CAACE,MAAhB,CAAL,EAA8B;AAC1BH,MAAAA,GAAG,CAACI,IAAJ,CAASH,EAAE,CAACE,MAAZ;AACH;;AACD,WAAOH,GAAP;AACH,GALqB,EAKnB,EALmB,CAAtB,CAboB,CAoBpB;;AACA,QAAMK,gBAAgB,GAAG,EAAzB;;AACA,OAAK,MAAMC,GAAX,IAAkBR,aAAlB,EAAiC;AAC7B,UAAMS,YAAY,GAAGf,OAAO,CAACgB,MAAR,CAAgBP,EAAD,IAAQA,EAAE,CAACE,MAAH,CAAUD,QAAV,CAAmBJ,aAAa,CAACQ,GAAD,CAAhC,CAAvB,CAArB,CAD6B,CAE7B;;AACAD,IAAAA,gBAAgB,CAACD,IAAjB,CAAsBG,YAAY,CAACE,MAAnC;AACH;;AAED,QAAMC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,CAAC,GAAGb,aAAJ,CADI;AAEZc,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,qBADX;AAEIC,MAAAA,eAAe,EAAE,qBAFrB;AAGIC,MAAAA,WAAW,EAAE,iBAHjB;AAIIC,MAAAA,WAAW,EAAE,CAJjB;AAKIC,MAAAA,oBAAoB,EAAE,qBAL1B;AAMIC,MAAAA,gBAAgB,EAAE,iBANtB;AAOIrB,MAAAA,IAAI,EAAE,CAAC,GAAGQ,gBAAJ;AAPV,KADM;AAFE,GAAhB;AAeA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AACI,IAAA,IAAI,EAAEK,OADV;AAEI,IAAA,KAAK,EAAE,GAFX;AAGI,IAAA,MAAM,EAAE,EAHZ;AAII,IAAA,OAAO,EAAE,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAYH,CAvDD;;AAyDA,eAAenB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport api from '../../../services/api'\n\nconst ChartBar1 = () => {\n    const [dataApi, setDataApi] = useState([]);\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    async function load() {\n        const response = await api.get('/imovel');\n        setDataApi(response.data)\n    };\n\n    //reduce para extrair somente os bairros não repetidos\n    const bairrosReduce = dataApi.reduce((acc, ap) => {\n        if (!acc.includes(ap.bairro)) {\n            acc.push(ap.bairro);\n        }\n        return acc;\n    }, [])\n\n    //Filtra por bairro escolhido array do bairrosReduce [\"Centro\",\"Cancelli\"]\n    const quantAptosBairro = []\n    for (const key in bairrosReduce) {\n        const filterBairro = dataApi.filter((ap) => ap.bairro.includes(bairrosReduce[key]))\n        //console.log(`A quantidade de Apartamentos no bairro:${bairrosReduce[key]} é:${filterBairro.length}`)\n        quantAptosBairro.push(filterBairro.length)\n    }\n\n    const barData = {\n        labels: [...bairrosReduce],\n        datasets: [\n            {\n                label: 'Unidades por Bairro',\n                backgroundColor: 'rgb(34, 0, 255,0.2)',\n                borderColor: 'rgb(34, 0, 255)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgb(34, 0, 255,0.4)',\n                hoverBorderColor: 'rgb(34, 0, 255)',\n                data: [...quantAptosBairro]\n            }\n        ]\n    };\n\n    return (\n        <div>\n            <Bar\n                data={barData}\n                width={100}\n                height={50}\n                options={{\n\n                }}\n            />\n        </div>\n    );\n}\n\nexport default ChartBar1"]},"metadata":{},"sourceType":"module"}