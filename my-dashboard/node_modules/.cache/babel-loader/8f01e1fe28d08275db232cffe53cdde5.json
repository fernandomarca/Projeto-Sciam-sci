{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js\";\nimport React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport { Link } from '@material-ui/core';\nimport api from '../../services/api';\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Nome',\n      field: 'nome'\n    }, {\n      title: 'Preço',\n      field: 'preco',\n      type: 'currency',\n      currencySetting: {\n        currencyCode: 'BRL',\n        locale: 'pt-BR'\n      }\n    }, {\n      title: 'Area Útil',\n      field: 'areaUtil',\n      type: 'numeric',\n      align: 'center'\n    }, {\n      field: 'unidade',\n      editable: 'never',\n      sorting: false,\n      readonly: true,\n      align: 'left'\n    }, {\n      title: 'Valor/m2',\n      field: 'valorm2',\n      editable: 'never'\n    }, {\n      title: 'Bairro',\n      field: 'bairro'\n    }, {\n      title: 'Cidade',\n      field: 'municipio'\n    }, {\n      title: 'Categoria',\n      field: 'categoria'\n    }, {\n      title: 'Tipo',\n      field: 'tipo'\n    }, {\n      title: 'Link',\n      field: 'link',\n      editable: 'never',\n      readonly: true,\n      sorting: false\n    }, {\n      title: 'Avatar',\n      field: 'avatar',\n      render: rowData => /*#__PURE__*/React.createElement(\"a\", {\n        href: rowData.state.data[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }\n      })\n    }],\n    data: []\n  });\n  const [dataApi, setDataApi] = useState([]);\n  useEffect(() => {\n    loadImoveis();\n  }, []);\n\n  async function loadImoveis() {\n    const response = await api.get('/imovel');\n    setState(prevState => {\n      const data = prevState.data;\n      data.push(response.data);\n      return { ...prevState,\n        data\n      };\n    });\n    var imoveis = state.data[0].map((ap, index) => {\n      let valorm2 = ap.preco / ap.areaUtil;\n      let linkHref = ap.link;\n      return {\n        id: `${ap._id}`,\n        nome: `${ap.nome}`,\n        preco: `${ap.preco}`,\n        areaUtil: `${ap.areaUtil}`,\n        unidade: 'm2',\n        valorm2: `${valorm2.toLocaleString('pt-br', {\n          style: 'currency',\n          currency: 'BRL'\n        })}`,\n        bairro: `${ap.bairro}`,\n        municipio: `${ap.municipio}`,\n        categoria: `${ap.categoria}`,\n        tipo: `${ap.tipo}`,\n        link: /*#__PURE__*/React.createElement(Link, {\n          target: \"_blank\",\n          rel: \"noopener\",\n          href: linkHref,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 23\n          }\n        }, \"Link do An\\xFAncio\")\n      };\n    });\n    setDataApi(imoveis);\n  }\n\n  ;\n\n  async function handleDelete(oldData) {\n    try {\n      let id = oldData.id;\n      await api.delete(`/imovel/${id}`);\n      setDataApi(dataApi.filter(imovel => imovel.id !== id));\n    } catch (err) {\n      alert('erro ao deletar:' + err);\n    }\n  }\n\n  async function handleAdd(newData) {\n    try {\n      await api.post('/imovel', newData);\n      loadImoveis();\n    } catch (err) {\n      alert('erro ao Cadastrar:' + err);\n    }\n  }\n\n  async function handleUpdate(newData, oldData) {\n    try {\n      if (oldData) {\n        let id = oldData.id;\n        await api.put(`/imovel/${id}`, newData);\n        loadImoveis();\n      }\n    } catch (err) {\n      alert('erro ao Atualizar:' + err);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Rel\\xE1torio\",\n    columns: state.columns,\n    data: dataApi,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleAdd(newData));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleUpdate(newData, oldData));\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve(handleDelete(oldData));\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/edittable.js"],"names":["React","useEffect","useState","MaterialTable","Link","api","MaterialTableDemo","state","setState","columns","title","field","type","currencySetting","currencyCode","locale","align","editable","sorting","readonly","render","rowData","data","dataApi","setDataApi","loadImoveis","response","get","prevState","push","imoveis","map","ap","index","valorm2","preco","areaUtil","linkHref","link","id","_id","nome","unidade","toLocaleString","style","currency","bairro","municipio","categoria","tipo","handleDelete","oldData","delete","filter","imovel","err","alert","handleAdd","newData","post","handleUpdate","put","onRowAdd","Promise","resolve","setTimeout","onRowUpdate","onRowDelete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport { Link } from '@material-ui/core';\n\nimport api from '../../services/api';\n\n\nexport default function MaterialTableDemo() {\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Nome', field: 'nome' },\n            { title: 'Preço', field: 'preco', type: 'currency', currencySetting: { currencyCode: 'BRL', locale: 'pt-BR' } },\n            { title: 'Area Útil', field: 'areaUtil', type: 'numeric', align: 'center' },\n            { field: 'unidade', editable: 'never', sorting: false, readonly: true, align: 'left' },\n            { title: 'Valor/m2', field: 'valorm2', editable: 'never' },\n            { title: 'Bairro', field: 'bairro' },\n            { title: 'Cidade', field: 'municipio' },\n            { title: 'Categoria', field: 'categoria' },\n            { title: 'Tipo', field: 'tipo' },\n            { title: 'Link', field: 'link', editable: 'never', readonly: true, sorting: false, },\n            {\n                title: 'Avatar',\n                field: 'avatar',\n                render: rowData => (\n                    <a\n                        href={rowData.state.data[0]}\n                    />\n                ),\n            }\n        ],\n        data: []\n    });\n\n    const [dataApi, setDataApi] = useState([]);\n\n    useEffect(() => {\n        loadImoveis();\n    }, [])\n\n    async function loadImoveis() {\n        const response = await api.get('/imovel');\n        setState((prevState) => {\n            const data = prevState.data;\n            data.push(response.data);\n            return { ...prevState, data };\n        });\n        var imoveis = state.data[0].map((ap, index) => {\n            let valorm2 = ap.preco / ap.areaUtil\n            let linkHref = ap.link;\n            return {\n                id: `${ap._id}`,\n                nome: `${ap.nome}`,\n                preco: `${ap.preco}`,\n                areaUtil: `${ap.areaUtil}`,\n                unidade: 'm2',\n                valorm2: `${valorm2.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}`,\n                bairro: `${ap.bairro}`,\n                municipio: `${ap.municipio}`,\n                categoria: `${ap.categoria}`,\n                tipo: `${ap.tipo}`,\n                link: <Link target='_blank' rel='noopener' href={linkHref} >Link do Anúncio</Link>\n            }\n        })\n        setDataApi(imoveis);\n    };\n\n    async function handleDelete(oldData) {\n        try {\n            let id = oldData.id;\n            await api.delete(`/imovel/${id}`)\n            setDataApi(dataApi.filter(imovel => imovel.id !== id));\n        } catch (err) {\n            alert('erro ao deletar:' + err)\n        }\n    }\n\n    async function handleAdd(newData) {\n        try {\n            await api.post('/imovel', newData)\n            loadImoveis();\n        } catch (err) {\n            alert('erro ao Cadastrar:' + err)\n        }\n    }\n    async function handleUpdate(newData, oldData) {\n        try {\n            if (oldData) {\n                let id = oldData.id\n                await api.put(`/imovel/${id}`, newData);\n                loadImoveis();\n            }\n\n        } catch (err) {\n            alert('erro ao Atualizar:' + err)\n        }\n    }\n    return (\n        <MaterialTable\n            title=\"Relátorio\"\n            columns={state.columns}\n            data={dataApi}\n            editable={{\n                onRowAdd: (newData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleAdd(newData));\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleUpdate(newData, oldData));\n                        }, 1000);\n                    }),\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        setTimeout(() => {\n                            resolve(handleDelete(oldData));\n                        }, 600);\n                    }),\n            }}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}