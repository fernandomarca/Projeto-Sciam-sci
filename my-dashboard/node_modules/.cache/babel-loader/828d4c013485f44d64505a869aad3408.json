{"ast":null,"code":"var _jsxFileName = \"/home/fernando/\\xC1rea de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/TableShow.js\";\nimport React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport { Link } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport api from '../../services/api';\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Nome',\n      field: 'nome'\n    }, {\n      title: 'Preço',\n      field: 'preco',\n      type: 'currency',\n      currencySetting: {\n        currencyCode: 'BRL',\n        locale: 'pt-BR'\n      }\n    }, {\n      title: 'Area Útil',\n      field: 'areaUtil',\n      type: 'numeric',\n      align: 'center'\n    }, {\n      field: 'unid',\n      editable: 'never',\n      sorting: false,\n      readonly: true,\n      align: 'left'\n    }, {\n      title: 'Valor/m2',\n      field: 'valorm2',\n      editable: 'never'\n    }, {\n      title: 'Bairro',\n      field: 'bairro'\n    }, {\n      title: 'Cidade',\n      field: 'municipio'\n    }, {\n      title: 'Categoria',\n      field: 'categoria'\n    }, {\n      title: 'Tipo',\n      field: 'tipo'\n    }, {\n      title: 'Link',\n      field: 'link',\n      editable: 'never',\n      sorting: false\n    }],\n    data: []\n  });\n  const [dataApi, setDataApi] = useState([]);\n  const [linearProgress, setLinearProgress] = useState(true);\n  useEffect(() => {\n    loadImoveis();\n  }, []);\n\n  async function loadImoveis() {\n    const response = await api.get('/imovel');\n    setState(prevState => {\n      const data = prevState.data;\n      data.pop();\n      data.push(response.data);\n      return { ...prevState\n      };\n    });\n    var imoveis = state.data[0].map(ap => {\n      let valorm2 = ap.preco / ap.areaUtil;\n      let linkHref = ap.link;\n      return {\n        id: `${ap._id}`,\n        nome: `${ap.nome}`,\n        preco: `${ap.preco}`,\n        areaUtil: `${ap.areaUtil}`,\n        unid: 'm2',\n        valorm2: `${valorm2.toLocaleString('pt-br', {\n          style: 'currency',\n          currency: 'BRL'\n        })}`,\n        bairro: `${ap.bairro}`,\n        municipio: `${ap.municipio}`,\n        categoria: `${ap.categoria}`,\n        tipo: `${ap.tipo}`,\n        link: linkHref === undefined ? null : /*#__PURE__*/React.createElement(Link, {\n          target: \"_blank\",\n          rel: \"noopener\",\n          href: linkHref,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 55\n          }\n        }, \"Link do An\\xFAncio\")\n      };\n    });\n    setDataApi(imoveis);\n    setLinearProgress(false);\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, linearProgress ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LinearProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(LinearProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  })) : null, /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"\",\n    columns: state.columns,\n    data: dataApi,\n    localization: {\n      body: {\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\n        addTooltip: 'adicionar',\n        deleteTooltip: 'excluir',\n        editTooltip: 'editar',\n        editcancelTooltip: 'cancelar',\n        editRow: {\n          saveTooltip: 'salvar',\n          cancelTooltip: 'cancelar',\n          deleteText: 'Tem certeza de que deseja excluir?'\n        }\n      },\n      grouping: {\n        groupedBy: 'Agrupado por:',\n        placeholder: 'Arraste os cabeçalhos aqui para agrupar!'\n      },\n      toolbar: {\n        searchTooltip: 'Pesquisar',\n        searchPlaceholder: 'Pesquisar',\n        showColumnsTitle: 'Mostrar colunas',\n        addRemoveColumns: 'Adicionar ou Remover Colunas'\n      },\n      pagination: {\n        labelRowsSelect: 'linhas',\n        labelDisplayedRows: '{count} de {from}-{to}',\n        firstTooltip: 'Primeira página',\n        previousTooltip: 'Página anterior',\n        nextTooltip: 'Próxima página',\n        lastTooltip: 'Última página'\n      }\n    },\n    options: {\n      grouping: true,\n      columnsButton: true\n    },\n    actions: [{\n      icon: 'refresh',\n      tooltip: 'Refresh Data',\n      isFreeAction: true,\n      onClick: () => loadImoveis()\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/fernando/Área de Trabalho/projetoDashImoveis/my-dashboard/src/components/Table/TableShow.js"],"names":["React","useEffect","useState","MaterialTable","Link","LinearProgress","api","MaterialTableDemo","state","setState","columns","title","field","type","currencySetting","currencyCode","locale","align","editable","sorting","readonly","data","dataApi","setDataApi","linearProgress","setLinearProgress","loadImoveis","response","get","prevState","pop","push","imoveis","map","ap","valorm2","preco","areaUtil","linkHref","link","id","_id","nome","unid","toLocaleString","style","currency","bairro","municipio","categoria","tipo","undefined","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","editcancelTooltip","editRow","saveTooltip","cancelTooltip","deleteText","grouping","groupedBy","placeholder","toolbar","searchTooltip","searchPlaceholder","showColumnsTitle","addRemoveColumns","pagination","labelRowsSelect","labelDisplayedRows","firstTooltip","previousTooltip","nextTooltip","lastTooltip","columnsButton","icon","tooltip","isFreeAction","onClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport { Link } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport api from '../../services/api';\n\nexport default function MaterialTableDemo() {\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: 'Nome', field: 'nome' },\n            { title: 'Preço', field: 'preco', type: 'currency', currencySetting: { currencyCode: 'BRL', locale: 'pt-BR' } },\n            {\n                title: 'Area Útil', field: 'areaUtil', type: 'numeric', align: 'center'\n            },\n            { field: 'unid', editable: 'never', sorting: false, readonly: true, align: 'left' },\n            { title: 'Valor/m2', field: 'valorm2', editable: 'never' },\n            { title: 'Bairro', field: 'bairro' },\n            { title: 'Cidade', field: 'municipio' },\n            { title: 'Categoria', field: 'categoria' },\n            { title: 'Tipo', field: 'tipo' },\n            { title: 'Link', field: 'link', editable: 'never', sorting: false, },\n        ],\n        data: []\n    });\n\n    const [dataApi, setDataApi] = useState([]);\n    const [linearProgress, setLinearProgress] = useState(true);\n\n    useEffect(() => {\n        loadImoveis();\n    }, [])\n\n    async function loadImoveis() {\n        const response = await api.get('/imovel');\n        setState((prevState) => {\n            const data = prevState.data;\n            data.pop();\n            data.push(response.data);\n            return { ...prevState };\n        });\n        var imoveis = state.data[0].map((ap) => {\n            let valorm2 = ap.preco / ap.areaUtil\n            let linkHref = ap.link\n            return {\n                id: `${ap._id}`,\n                nome: `${ap.nome}`,\n                preco: `${ap.preco}`,\n                areaUtil: `${ap.areaUtil}`,\n                unid: 'm2',\n                valorm2: `${valorm2.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}`,\n                bairro: `${ap.bairro}`,\n                municipio: `${ap.municipio}`,\n                categoria: `${ap.categoria}`,\n                tipo: `${ap.tipo}`,\n                link: linkHref === undefined ? null : <Link target='_blank' rel='noopener' href={linkHref} >Link do Anúncio</Link>,\n            }\n        })\n        setDataApi(imoveis);\n        setLinearProgress(false)\n    };\n\n    return (\n        <div>\n            {linearProgress ?\n                <div ><LinearProgress />\n                    <LinearProgress />\n                </div> : null}\n            <MaterialTable\n                title=\"\"\n                columns={state.columns}\n                data={dataApi}\n                localization={{\n                    body: {\n                        emptyDataSourceMessage: 'Nenhum registro para exibir',\n                        addTooltip: 'adicionar',\n                        deleteTooltip: 'excluir',\n                        editTooltip: 'editar',\n                        editcancelTooltip: 'cancelar',\n\n                        editRow: {\n                            saveTooltip: 'salvar',\n                            cancelTooltip: 'cancelar',\n                            deleteText: 'Tem certeza de que deseja excluir?'\n                        },\n                    },\n                    grouping: {\n                        groupedBy: 'Agrupado por:',\n                        placeholder: 'Arraste os cabeçalhos aqui para agrupar!'\n                    },\n                    toolbar: {\n                        searchTooltip: 'Pesquisar',\n                        searchPlaceholder: 'Pesquisar',\n                        showColumnsTitle: 'Mostrar colunas',\n                        addRemoveColumns: 'Adicionar ou Remover Colunas'\n                    },\n                    pagination: {\n                        labelRowsSelect: 'linhas',\n                        labelDisplayedRows: '{count} de {from}-{to}',\n                        firstTooltip: 'Primeira página',\n                        previousTooltip: 'Página anterior',\n                        nextTooltip: 'Próxima página',\n                        lastTooltip: 'Última página'\n                    }\n                }}\n                options={{\n                    grouping: true,\n                    columnsButton: true,\n                }}\n                actions={[\n                    {\n                        icon: 'refresh',\n                        tooltip: 'Refresh Data',\n                        isFreeAction: true,\n                        onClick: () => loadImoveis(),\n                    }\n                ]}\n            />\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}